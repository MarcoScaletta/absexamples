/*************************************

WEAK MEMORY MODEL - Mainly based on the theoretical work of Mantel at al. in CSF 2014
FIRST VERSION BY: Eduard Kamburjan
************************************/


/*************************************
The MIT License

Copyright (c) 2017 Eduard Kamburjan

Permission is hereby granted, free of charge, 
to any person obtaining a copy of this software and 
associated documentation files (the "Software"), to 
deal in the Software without restriction, including 
without limitation the rights to use, copy, modify, 
merge, publish, distribute, sublicense, and/or sell 
copies of the Software, and to permit persons to whom 
the Software is furnished to do so, 
subject to the following conditions:

The above copyright notice and this permission notice 
shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, 
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES 
OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. 
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR 
ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, 
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE 
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
************************************/

module Mem;

data Location = Location(String name);
data Access   = Write(Thread, Location, Int value, Int) 
              | Read(Thread, Location, Int);

interface Thread { }

interface Memory{
     Fut<Int> read(Thread t, Location loc);
     Unit write(Thread t, Location loc, Int val);
     Int const(Int i);
     Int internalRead(Int myId); //spec only
}

def List<T> slice<T>(List<T> list, Int startPos, Int endPos) = sliceAux(list, startPos, endPos, 0);
def List<T> sliceAux<T>(List<T> list, Int startPos, Int endPos, Int it) = 
      if it > endPos then Nil
 else if it < startPos then sliceAux(tail(list), startPos, endPos, it + 1)
 else case list{
 	Cons(x, xs) => Cons(x ,sliceAux(xs, startPos, endPos, it + 1));
 	Nil => Nil;
 };
 

	
def Maybe<Int> getWriteValueFor(List<Access> list, Location loc, Thread tid) = getWriteForAux(list, loc, 0, tid);
def Maybe<Int> getWriteForAux(List<Access> list, Location loc, Int pos, Thread tid) = case list {
		Cons(x, xs) => case x {
			Write(tidW,locW,_,id) => if(locW == loc && tid == tidW) then Just(id) else getWriteForAux(xs, loc, pos+1, tid);
			_ => getWriteForAux(xs, loc, pos+1, tid);
		};
		Nil => Nothing;
	};

class Memory implements Memory {
	
     Int counter = 0;                                                                 //internal modeling of equality   
     List<Access> list = Nil;                                                         //access list
     Set<Int> done = EmptySet;                                                        //completed accesses
     Map<Int, Int> ret = EmptyMap;                                                    //maps access ids to return values
     Map<Location, Int> mem = put(put(EmptyMap, Location("w"), 0), Location("v"), 0); //actual memory
     
     //issues a read operation, returns the read value once the access has succeeded
     Fut<Int> read(Thread t, Location loc){
       Int myId = counter;
       list = appendright(list, Read(t, loc, myId));
       counter = counter + 1;
       Fut<Int> ff = this!internalRead(myId);
       return ff;
     }
     
     Int internalRead(Int myId){     
       await contains(done, myId);
       return lookupUnsafe(ret, myId);
     }
     
     //issues a write operation, returns immediately once the access is added to the access list
     Unit write(Thread t, Location loc, Int val){
       Int myId = counter;
       list = appendright(list, Write(t, loc, val, myId));     
       counter = counter + 1;
     }
     
     //for init
     Int const(Int i){
       return i;
     }
     
     
     List<Int> strategy(){
     	Int i = 0;
     	List<Int> allowed = Nil;
     	while(i < length(list)){
     		Bool add = True;
     		Int j = 0;
     		while(j < i){
     			Bool b = this.maySwap(nth(list,j),nth(list,i));
     			if(!b){
     				add = False;
     				j = length(list);
     			}
     			j = j +1;
     		}
     		if(add){ allowed = Cons(i, allowed);}
     		i = i + 1;
     	}
     	return allowed;
	 }
	 
	 Bool maySwap(Access a, Access b){
     	Bool ret = False;
     	case a {
     		Read(t1,_,_)    => case b {
     								Read(t2,_,_) => { ret = t1 != t2; }
     								Write(t2,_,_,_) => { ret = t1 != t2; }
     						  }
     		Write(t1,_,_,_) => case b {
     								Read(t2,_,_) => { ret = t1 != t2; }
     								Write(t2,_,_,_) => { ret = t1 != t2; }
     						  }
     	}
     	return ret;
	 }
	 
	 Int getValueFor(Thread tid, Location loc, Int pos){
	 	return lookupUnsafe(mem, loc);
	 }
	 
	 Pair<Access, Int> getAccess(Int pos){
     	Access acc = nth(list, pos);
	    Int val = -1;
	    case acc { 
	      	Write(_, _ ,vi, _) => {val = vi;}
	      	Read(tid, loc,_ ) => {val = this.getValueFor(tid, loc, pos);}
	    }
	    
     	this.list = concatenate(slice(list, 0, pos-1), slice(list, pos+1, length(list)));
     	return Pair(acc, val);
	 }
	 
	 Int retrieve(List<Int> myList){
	 	return head(myList);//nth(accList, random(length(list))); for less predictability
	 }
	 
     Unit run(){
     	while(True){
     	   	await list != Nil;	   
	       	List<Int> accList = this.strategy();
	       	Int pos = this.retrieve(accList);
	       	Pair<Access, Int> pp = this.getAccess(pos); 
	     	case fst(pp) {
	     		Write(t, loc, val, id) => {
	     			done = insertElement(done, id);
	     			mem = put(mem, loc, val);
	     		}
	     		Read(t, loc, id)       => {
	     			done = insertElement(done, id);
			  		ret = put(ret, id, snd(pp));
	     	   	}
	     	}     	   
     	}
     }
}

/**
*
*  Programs are represented as sequences of memory operations
*  await mem!write(this,Location("w"),1);  duration(1,1);     //write a value to the memory
*  reg1 = await mem!read(this,Location("v"));    duration(1,1);     //request a read from a location
*  Int i = reg1.get;                                          //block and wait for a read to complete
*
**/
class Thread1(Memory mem) implements Thread {
   Fut<Int> reg1;
             
   Unit run(){
     reg1 = mem!const(0);
     reg1.get;
     
     //duration(3,3); //duration enforces demo ordering
	 await mem!write(this,Location("w"),1);  
     reg1 = await mem!read(this,Location("v"));    
     Int i = reg1.get;
     println("thread1: "+toString(i));
   }
}

class Thread2(Memory mem) implements Thread {
   Fut<Int> reg1;
     
   Unit run(){
     reg1 = mem!const(0);
     reg1.get;

	 await mem!write(this,Location("v"),1);  
     reg1 = await mem!read(this,Location("w"));  
     Int i = reg1.get;
     println("thread2: "+toString(i));
   }
}




class Application{ 
	Unit run(){
	 	[HTTPName: "mem"] 
	 	  Memory mem = new Memory();
		[HTTPName: "t1"]  
		  Thread t1 = new Thread1(mem);
		[HTTPName: "t2"]  
		  Thread t2 = new Thread2(mem);
	}
}

{
   new local Application();
}

/**
Allows to reorder a read before a read
**/
delta ReadReadDelta;
modifies class Mem.Memory {
	 //gets first read, if no read in list, gets first write
     modifies Bool maySwap(Access a, Access b){
     	Bool ret = False;
     	case a {
     		Read(_,loca,_)    => case b {
     								Read(_,locb,_) => { Bool last = original(a,b); ret = last || loca != locb; }
     								Write(_,_,_,_) => { ret = original(a,b);}
     						  }
     		Write(_,_,_,_) => { ret = original(a,b);}
     	}
     	return ret;
	 }
}
/**
Allows to reorder a write before a read
**/
delta ReadWriteDelta;
modifies class Mem.Memory {
	 //gets first read, if no read in list, gets first write
     modifies Bool maySwap(Access a, Access b){
     	Bool ret = False;
     	case a {
     		Read(_,loca,_)    => case b {
     								Read(_,_,_) => { ret = original(a,b); }
     								Write(_,locb,_,_) => { Bool last = original(a,b); ret = last || loca != locb; }
     						  }
     		Write(_,_,_,_) => { ret = original(a,b); }
     	}
     	return ret;
	 }
}
/**
Allows to reorder a read before a write
**/
delta WriteReadDelta;
modifies class Mem.Memory {
	 //gets first read, if no read in list, gets first write
     modifies Bool maySwap(Access a, Access b){
     	Bool ret = False;
     	case a {
     		Read(_,_,_)    => { ret = original(a,b); }
     		Write(_,loca,_,_) => case b {
     								Read(_,locb,_) => { Bool last = original(a,b); 
     								                    ret = last || loca != locb; }
     								Write(_,_,_,_) => { ret = original(a,b); }
     						  }
     	}
     	return ret;
	 }
}

/**
Allows to reorder a read before a write
**/
delta WriteWriteDelta;
modifies class Mem.Memory {
	 //gets first read, if no read in list, gets first write
     modifies Bool maySwap(Access a, Access b){
     	Bool ret = False;
     	case a {
     		Read(_,_,_)    => { ret = original(a,b); }
     		Write(_,loca,_,_) => case b {
     								Read(_,_,_) => { ret = original(a,b); }
     								Write(_,locb,_,_) => { Bool last = original(a,b); ret = last || loca != locb; }
     						  }
     	}
     	return ret;
	 }
}

/**
Allows to reorder a read before a write
**/
delta WriteReadOwnDelta;
modifies class Mem.Memory {
	 //gets first read, if no read in list, gets first write
     modifies Bool maySwap(Access a, Access b){
     	Bool ret = False;
     	case a {
     		Read(_,_,_)    => { ret = original(a,b); }
     		Write(_,loca,_,_) => case b {
     								Read(_,locb,_) => { if(loca == locb) ret = True; else ret = original(a,b); }
     								Write(_,_,_,_) => { ret = original(a,b); }
     						  }
     	}
     	return ret;
	 }
}


/**
Instead of reading from the memory, the read may read from a write it is reorder before
**/
delta ReadEarlyLocalDelta;
modifies class Mem.Memory {
     modifies Int getValueFor(Thread tid, Location loc, Int pos){
     	List<Access> pre = slice(list, 0, pos-1);
     	Maybe<Int> ret = getWriteValueFor(pre, loc, tid);
     	Int i = -1;
     	case ret{
     		Just(val) => i = val;
     		Nothing   => i = original(tid, loc, pos);
     	}
		return i;
	 }
}

delta DemoDelta;
uses Mem;
adds def Int getFirstRead(List<Int> list,List<Access> acc) = getFirstReadAux(list,acc,0);

adds def Int getFirstReadAux(List<Int> list, List<Access> acc, Int pos) = case list{
	Cons(x,xs) => case nth(acc,x){
		Read(_,_,_)    => pos;
		Write(_,_,_,_) => getFirstReadAux(xs,acc, pos+1);
	};
	Nil => 0;
};
modifies class Memory {
     modifies Unit run(){
	 	await duration(3,3);
	 	original();
	 } 
	 
	 modifies Int retrieve(List<Int> myList){
	 	Int i = getFirstRead(reverse(myList), list);
	 	return i;
	 }
	 
}

	 

productline Examples;
features ReadReadFeature, ReadWriteFeature, WriteWriteFeature, WriteReadFeature, ReadEarlyFeature, DemoFeature;
delta ReadReadDelta when ReadReadFeature;
delta DemoDelta when DemoFeature;
delta ReadWriteDelta when ReadWriteFeature;
delta WriteWriteDelta when WriteWriteFeature;
delta WriteReadDelta  when WriteReadFeature;
delta ReadEarlyLocalDelta when ReadEarlyFeature;
delta WriteReadOwnDelta after WriteReadDelta when ReadEarlyFeature;
product TSO (WriteReadFeature, ReadEarlyFeature);
product PSO (WriteReadFeature, WriteWriteFeature, ReadEarlyFeature);
product IBM370 (WriteReadFeature); 
product Demo (DemoFeature); 
product IBMDemo (WriteReadFeature, DemoFeature); 
product TSODemo (WriteReadFeature, ReadEarlyFeature, DemoFeature); 
product MaximalProduct (ReadReadFeature, ReadWriteFeature, WriteWriteFeature, WriteReadFeature, ReadEarlyFeature);