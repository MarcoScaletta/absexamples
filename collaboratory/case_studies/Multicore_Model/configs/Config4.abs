module Config4;

import * from Types;
import * from System;

// This function creates the initial MAIN TASK placed on the scheduler,
// where all cores repeat a loop by <repetitions>.
// the loop's body contains a Write instruction on the same location, for all cores
// this leads to congestion.

def RstList createMain(Int repetitions) =
  let (RstList rst) = list[Loop(list[Write(Pair(1,1))], repetitions)]
  in copy(Spawn(rst),4);


//***********************MAIN BLOCK ********************************
{

  // number of cores
  Int nCores = 4;

  //number of tasks
  Int nTasks = 10;

  // println("Cores: "+toString(nCores) +", Tasks: "+toString(nTasks));

  // size of each task
  Int sizeTasks = 100;

  // number of caches per core
  Int nLevels =3;
  // size of the l1 cache.
  Int l1Size = 10;

  // the other caches' sizes are a multiple of 10
  // e.g., if l1 = 10 then l2 = 20 and l3 = 30

  // size of the main memory
  Int memo = 3*nTasks*sizeTasks+10;

  // CREATE THE MAIN PROGRAM TO BE SIMULATED for its cache performance
  RstList rst = createMain(nTasks);

  // this is an object that creates configurations and tasks, the paremeter indicates the resources per DC
  ISystem system = new local System(Just(1));

  // this method simulates the system until the end of its simulation
  system.runSystem(nCores, nLevels, l1Size, memo,  rst);

}
